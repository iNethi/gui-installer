- name: Deploy iNethi User Management with Docker Container
  hosts: localserver
  become: true
  gather_facts: yes
  vars_files:
    - ./variables.yml

  vars:
    TRAEFIK_API_RULE_DJANGO: "inethi-user-management"
    inethi_dn: "inethilocal.net"
    TRAEFIK_ENTRYPOINT: "websecure"
    INETHI_NETWORK: "inethi-bridge-traefik"
    DJANGO_MNT: "/mnt/data/inethi_user_management"
    MYSQL_MANAGEMENT_MNT: "/mnt/data/inethi_user_management_mysql"

  tasks:
    - name: Create Docker volume
      docker_volume:
        name: inethi_user_management_data

    - name: Check if MySQL container is running
      shell: "docker logs inethi-user-management-mysql"
      register: docker_ps_result_mysql

      ignore_errors: true
    - name: Check if API container is running
      shell: "docker logs inethi-user-management-api"
      register: docker_ps_result_api
      ignore_errors: true

    - name: Create directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0777'
      with_items:
        - "{{ DJANGO_MNT }}"
        - "{{ DJANGO_MNT }}/app"
        - "{{ MYSQL_MANAGEMENT_MNT }}"

    - name: Copy files to Server
      copy:
        src: "{{ playbook_dir }}/inethi_user_management/"
        dest: "{{ DJANGO_MNT }}/"
    - name: Copy manage.py
      copy:
        src: "{{ playbook_dir }}/inethi_user_management/manage.py"
        dest: "{{ DJANGO_MNT }}/app/manage.py"

    - name: Copy file into app folder
      copy:
        src: "{{ playbook_dir }}/inethi_user_management/"
        dest: "{{ DJANGO_MNT }}/app/"

    - name: Copy package.json
      copy:
        src: "{{ playbook_dir }}/inethi_user_management/package.json"
        dest: "{{ DJANGO_MNT }}/app/package.json"

    - name: Copy requirements.txt
      copy:
        src: "{{ playbook_dir }}/inethi_user_management/requirements.txt"
        dest: "{{ DJANGO_MNT }}/app/requirements.txt"

    - name: Update Python file with values from builder
      lineinfile:
        path: "{{ DJANGO_MNT }}/app/inethi_management/views.py"
        regexp: "^PriceToPackageMap = "
        line: "PriceToPackageMap = { '{{ PAUM_COST_30 }}': ['TIME30M', 1800, '1W'], '{{ PAUM_COST_60 }}': ['TIME1H', 3600, '2W'], '{{ PAUM_COST_24 }}': ['TIME24H', 86400, '1M'], '{{ PAUM_COST_1GB }}': ['DATA1G', 2592000, '3M']}"
      when: docker_ps_result_api.rc != 0

    - name: Deploy API
      command: "docker-compose -f /mnt/data/inethi_user_management/docker-compose.yml up -d inethi-user-management-mysql"
      when: docker_ps_result_mysql.rc != 0

    - name: Wait for MySQL container to be up
      pause:
        minutes: 1
      when: docker_ps_result_mysql.rc != 0

    - name: Build API
      command: "docker-compose -f /mnt/data/inethi_user_management/docker-compose.yml build"
      when: docker_ps_result_api.rc != 0

    - name: Wait for container build to be done
      pause:
        minutes: 2
      when: docker_ps_result_api.rc != 0

    - name: Deploy API
      command: "docker-compose -f /mnt/data/inethi_user_management/docker-compose.yml up -d inethi-user-management-api"
      when: docker_ps_result_api.rc != 0

    - name: Wait for API container to be up
      pause:
        minutes: 1
      when: docker_ps_result_api.rc != 0

    - name: Run Django make migrations
      shell: "docker exec -it inethi-user-management-api python manage.py makemigrations inethi_management"
      when: docker_ps_result_api.rc != 0

    - name: Run Migrate Django
      shell: "docker exec -it inethi-user-management-api python manage.py migrate"
      when: docker_ps_result_api.rc != 0
