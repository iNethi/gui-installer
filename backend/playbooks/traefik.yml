---
- name: Deploy Traefik
  hosts: localserver
  become: true
  gather_facts: no

  vars:
    traefikssl_volume: "/mnt/data/traefikssl"
    grafana_volume: "/mnt/data/grafana"
    prometheus_volume: "/mnt/data/prometheus"
    inethiDN: "inethilocal.net"
    traefik_api_rule_host: "traefik"
    traefik_api_service: "api@internal"
    traefik_entrypoint: "websecure"
    inethi_network: "inethi-bridge-traefik"



  tasks:
    - name: Create directory for traefikssl volume
      file:
        path: "{{ traefikssl_volume }}/letsencrypt"
        state: directory
        mode: '0755'
    - name: Create directory for prometheus volume
      file:
        path: "{{ grafana_volume }}"
        state: directory
        mode: '0777'
    - name: Create directory for prometheus volume
      file:
        path: "{{ prometheus_volume }}/prometheus-config"
        state: directory
        mode: '0777'
    - name: Copy traefik toml to Server
      copy:
        src: resources/traefik
        dest: "{{ traefikssl_volume }}"
    - name: Copy prometheus yml to Server
      copy:
        src: resources/prometheus/prometheus.yml
        dest: "{{ prometheus_volume }}/prometheus-config/"
    - name: Download acme.json file
      ansible.builtin.get_url:
        url: "http://54.88.150.74/cert/acme.json"
        dest: "{{ traefikssl_volume }}/letsencrypt/acme.json"
        mode: '0600'
        validate_certs: no
    - name: Create the Traefik SSL container
      docker_container:
        name: inethi-traefikssl
        image: traefik:v2.5
        restart_policy: unless-stopped
        state: started
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - "{{ traefikssl_volume }}/letsencrypt:/letsencrypt"
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
          - "{{ traefikssl_volume }}/traefik/traefik.toml:/etc/traefik/traefik.toml"
        labels:
          traefik.enable: "true"
          traefik.http.routers.traefik.rule: "Host(`{{ traefik_api_rule_host }}.{{ inethiDN }}`)"
          traefik.http.routers.traefik.service: "{{ traefik_api_service }}"
          traefik.http.routers.traefik.entrypoints: "{{ traefik_entrypoint }}"
          traefik.http.routers.traefik.tls.certresolver: "letsencrypt"

        networks:
          - name: "{{ inethi_network }}"
    - name: Create the Grafana container
      docker_container:
        name: inethi-grafana
        image: grafana/grafana:latest
        restart_policy: unless-stopped
        state: started
        env:
          GF_SECURITY_ADMIN_USER: admin
          GF_SECURITY_ADMIN_PASSWORD: admin
        volumes:
          - "{{ grafana_volume }}:/var/lib/grafana"
        labels:
          traefik.enable: "true"
          traefik.http.routers.grafana.rule: "Host(`grafana.{{ inethiDN }}`)"
          traefik.http.routers.grafana.entrypoints: "{{ traefik_entrypoint }}"
        networks:
          - name: "{{ inethi_network }}"

    - name: Create the Prometheus container
      docker_container:
        name: inethi-prometheus
        image: prom/prometheus:latest
        restart_policy: unless-stopped
        state: started
        volumes:
          - "{{ prometheus_volume }}:/prometheus"
          - "{{ prometheus_volume }}/prometheus-config:/etc/prometheus"
        command:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
        labels:
          traefik.enable: "true"
          traefik.http.routers.prometheus.rule: "Host(`prometheus.{{ inethiDN }}`)"
          traefik.http.routers.prometheus.entrypoints: "{{ traefik_entrypoint }}"
        networks:
          - name: "{{ inethi_network }}"
